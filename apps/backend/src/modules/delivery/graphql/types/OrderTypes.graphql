enum OrderStateEnum{
    PENDING_RECEIPT,
    NEW,
    PREPARING,
    READY,
    ON_THE_WAY,
    DELIVERED
}

enum OrderPaymentMethodEnum{
    CASH,
    BANK_TRANSFER,
    MP_TRANSFER,
}

type OrderContact{
    name: String!
    phone: String!
    email: String!
    observations: String
}

type OrderDelivery{
    mode: String!
    timeMode: String!
    time: String!
}

type OrderItems{
    product: Product!
    quantity: Int!
    amount: Float!
}

type OrderLocation{
    address: String!
    floor: String
    apartment: String
    latitude: Float
    longitude: Float
    country: String
    province: String
    locality: String
    postalCode: String
}

type OrderPayment{
    method: OrderPaymentMethodEnum
    transactionId: String
    receiptFile: String
    confirmed: Boolean
}


type Order{
    id: ID!
    contact: OrderContact!
    location: OrderLocation
    delivery: OrderDelivery!
    items: [OrderItems]
    payment: OrderPayment
    state: OrderStateEnum
    identifier: String
    number: Int
    createdAt: String
    updatedAt: String
    user: User
    zone: Zone
    zoneName: String
    totalQuantity: Float
    totalAmount: Float
    deliveryUser: User
}

type OrderPaginated{
    totalItems: Int!
    page: Int!
    items: [Order!]
}

type Query {
    orderFind(id:ID!): Order
    orderFindByIdentifier(identifier:String!): Order

    orderFetch: [Order]
    orderPaginate( pageNumber: Int, itemsPerPage: Int, search: String, orderBy: String, orderDesc: Boolean): OrderPaginated


}

input OrderInput{
    contact: OrderContactInput!
    location: OrderLocationInput
    delivery: OrderDeliveryInput!
    payment: OrderPaymentInput
    items: [OrderItemsInput!]
}


input OrderContactInput{
    name: String!
    phone: String!
    email: String!
    observations: String
}

input OrderDeliveryInput{
    mode: String!
    timeMode: String!
    time: String!
}

input OrderItemsInput{
    product: ID!
    quantity: Int!
}

input OrderLocationInput{
    address: String!
    floor: String
    apartment: String
    latitude: Float
    longitude: Float
    country: String
    province: String
    locality: String
    postalCode: String

}

input OrderPaymentInput{
    method: OrderPaymentMethodEnum
    transactionId: String
    receiptFile: String
    confirmed: Boolean
}


type OrderDelete{
    id: ID!
    success: Boolean!
}


type Mutation {
    orderCreate(input: OrderInput): Order
    orderUpdate(id: ID!, input: OrderInput): Order
    orderUpdateState(id: ID!, state: OrderStateEnum): Order
    orderDelete(id: ID!): OrderDelete!
}
